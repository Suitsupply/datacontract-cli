{# filepath: raw_contract_sql.jinja #}
{# This template generates SQL for raw dbt models based on data contract specifications #}

{# Handle incremental model configuration #}
{% if contract.refresh_mode == 'INCREMENTAL' and contract.has_primary_key %}

{% if execute %}
{% if flags.FULL_REFRESH %}
    {{ exceptions.raise_compiler_error("Full refresh is not allowed for raw tables. Exclude physical tables with '--exclude ' flag or drop the tables manually.") }}
{% endif %}
{% endif %}   
        
{{ 
    config(
        materialized = 'incremental',
        on_schema_change = 'append_new_columns',
        partition_by = {
            'field': '_loaded_at',
            'data_type': 'timestamp',
            'granularity': 'day'
        },
        cluster_by = contract.cluster_by,
        contract = {
            "enforced": True
        }
        {% if contract.snapshot_status == 'ENABLED' %},
        post_hook="{{create_external_snapshot(this, '{% for field in contract.column_data %}{% if field.field_type == 'JSON' %}{% if not loop.first %},{% endif %}{{ field.field_alias }}{% endif %}{% endfor %}' )}}"
        {% endif %}
        {% if contract.partition_expiration_days > 0 %},
        partition_expiration_days = {{ contract.partition_expiration_days }}
        {% endif %}
    )            
}}

{% if is_incremental() %}
    {%- set sql_statement -%}
        (select max(_loaded_at) from {{ this }} WHERE _loaded_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP, INTERVAL 7 DAY))
    {%- endset -%}
    {%- set max_ts = dbt_utils.get_single_value(sql_statement, default=None) -%}
    
    {% if max_ts == None %}
        {%- set sql_statement %}
            (select max(_loaded_at) from {{ this }})
        {% endset -%}
        {%- set max_ts = dbt_utils.get_single_value(sql_statement, default=None) -%}

        {% if max_ts == None %}
            {%- set max_ts = "2020-01-01" %}
        {% endif -%}
    {% endif %}
{% endif -%}

{# Handle view configuration #}
{% else %}
{{ 
    config(
        materialized = 'view'
        {% if contract.snapshot_status == 'ENABLED' %},
        post_hook="{{create_external_snapshot(this, '{% for field in contract.column_data %}{% if field.field_type == 'JSON' %}{% if not loop.first %},{% endif %}{{ field.field_alias }}{% endif %}{% endfor %}' )}}"
        {% endif %}
    )            
}}
{% endif %}

with 
_source_query as (
    select
    --Metadata
    {% for field in contract.column_data %}
    {% if field.field_category == 'metadata' %}
    {% if not loop.first %},{% endif %}
    {{ field.field_source }}{% for i in range(54 - field.field_source|length) %} {% endfor %} as {{ field.field_alias }}
    {% endif %}
    {% endfor %}

    --Source Data
    {% if contract.column_data|selectattr('field_category', 'equalto', 'metadata')|list|length > 0 %},{% endif %}
    {% for field in contract.column_data %}
    {% if field.field_category == 'data' %}
    {% if not loop.first %},{% endif %}
    {{ field.field_source }}{% for i in range(54 - field.field_source|length) %} {% endfor %} as {{ field.field_alias }}
    {% endif %}
    {% endfor %}
    from {{ source(contract.dataset, contract.product + '__' + contract.entity) }}
    {% if contract.sql_join %}
    {{ contract.sql_join }}
    {% endif %}
)
select
    *
    {% for field in contract.column_data %}
    {% if field.field_category == 'primary_key' %}
    ,{{ field.field_source }} as {{ field.field_alias }}
    {% endif %}
    {% endfor %}
from _source_query
{% if contract.sql_where %}
{{ contract.sql_where }}
{% endif %}

{# Handle incremental filtering #}
{% if contract.refresh_mode == 'INCREMENTAL' and contract.has_primary_key %}
{% if is_incremental() %}
{% if contract.sql_where %}
and _loaded_at > TIMESTAMP('{{ max_ts }}')
{% else %}
where _loaded_at > TIMESTAMP('{{ max_ts }}')
{% endif %}
{% endif %}
{% endif %}

{# Handle deduplication #}
{% if contract.has_primary_key and contract.deduplication == 'ENABLED' %}
qualify row_number()over(partition by _primary_key order by {{ contract.order_by }} desc) = 1
{% endif %}
